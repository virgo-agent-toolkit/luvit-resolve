local path = require('path')
local string = require('string')
local test = require('tape')('test-resolve')
local resolve = require('..')

test('test resolve builtin: http_parser', nil, function(t)
  local module = resolve.resolve_package('http_parser', __dirname)

  t:not_nil(module, 'module is not found')
  t:is_nil(module.main, 'http_parser is a builtin so main should be nil')
  t:is_nil(module.package, 'there is not a package.lua for http_parser package so module.package should be nil')
  t:equal(module.is_stdlib, false, 'http_parser is not a stdlib')
  t:equal(module.is_builtin, true, 'http_parser is indeed a builtin')
  t:finish()
end)

test('test resolve stdlib: fs', nil, function(t)
  local module = resolve.resolve_package('fs', __dirname)

  t:not_nil(module, 'module is not found')
  t:not_nil(string.find(module.main, 'luvit/lib/luvit/fs.lua'), 'resolve_package resolves to wrong main')
  t:is_nil(module.package, 'there is not a package.lua for fs package so module.package should be nil')
  t:equal(module.is_stdlib, true, 'fs is indeed a stdlib')
  t:equal(module.is_builtin, false, 'fs is not a builtin')
  t:finish()
end)

test('test resolve tape', nil, function(t)
  local module = resolve.resolve_package('tape', __dirname)

  t:not_nil(module, 'module is not found')
  t:equal(module.main, path.normalize(path.join(__dirname, '../modules/tape/init.lua')), 'resolve_package resolves to wrong main')
  t:not_nil(module.package, 'there is package.lua for tape package so module.package should not be nil')
  t:equal(module.is_stdlib, false, 'tape is not a stdlib')
  t:equal(module.is_builtin, false, 'tape is not a builtin')
  t:finish()
end)

local test_simple = function(t, module)
  t:not_nil(module, 'module is not found')
  t:equal(module.main, path.normalize(path.join(__dirname, './fixtures/simple.lua')), 'resolve_package resolves to wrong main')
  t:is_nil(module.package, 'there is no package.lua for the package so module.package should be nil')
  t:equal(module.is_stdlib, false, 'the package is not a stdlib')
  t:equal(module.is_builtin, false, 'the package is not a builtin')
  t:finish()
end

test('test simple.lua - relpath, without extension', nil, function(t)
  local module = resolve.resolve_package('./fixtures/simple', __dirname)
  test_simple(t, module)
end)

test('test simple.lua - relpath, with extension', nil, function(t)
  local module = resolve.resolve_package('./fixtures/simple.lua', __dirname)
  test_simple(t, module)
end)

test('test simple.lua - abspath, without extension', nil, function(t)
  local module = resolve.resolve_package(path.join(__dirname, './fixtures/simple'), __dirname)
  test_simple(t, module)
end)

test('test simple.lua - abspath, with extension', nil, function(t)
  local module = resolve.resolve_package(path.join(__dirname, './fixtures/simple.lua'), __dirname)
  test_simple(t, module)
end)
